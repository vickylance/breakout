{"version":3,"sources":["src/Ball.ts","src/Vector2.ts","src/Paddle.ts","src/Input.ts","src/Game.ts","src/SpriteSheet.ts","src/assets/breakout.json","src/index.ts"],"names":["module","exports","name","x","y","width","height"],"mappings":"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","file":"src.d5f77f06.js","sourceRoot":"..","sourcesContent":["import GameObject from \"./GameObject\";\nimport Vector2 from \"./Vector2\";\nimport Sprite from \"./Sprite\";\nimport Game from \"./Game\";\nimport SpriteSheet from \"./SpriteSheet\";\n\nclass Ball implements GameObject {\n  public position: Vector2;\n  public sprite: Sprite;\n  private speed: Vector2;\n  private game: Game;\n  private height: number;\n  private width: number;\n  public scale: number;\n  constructor(game: Game) {\n    this.position = {\n      x: 10,\n      y: 10\n    };\n    this.speed = {\n      x: 80,\n      y: 80\n    };\n    this.game = game;\n    this.sprite = this.game.spritesheets[\"main\"].getImage(\"ball\");\n    this.height = this.sprite.height;\n    this.width = this.sprite.width;\n    this.scale = 1;\n  }\n\n  update(deltaTime: number) {\n    this.position.x += this.speed.x / deltaTime;\n    this.position.y += this.speed.y / deltaTime;\n\n    if(this.position.x + this.width > this.game.width || this.position.x < 0) {\n      this.speed.x = -this.speed.x;\n    }\n    if(this.position.y + this.height > this.game.height || this.position.y < 0) {\n      this.speed.y = -this.speed.y;\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    let spr = this.game.spritesheets[\"main\"] as SpriteSheet;\n    ctx.drawImage(\n      spr.image,\n      this.sprite.x,\n      this.sprite.y,\n      this.sprite.width,\n      this.sprite.height,\n      this.position.x,\n      this.position.y,\n      this.width * this.scale,\n      this.height * this.scale,\n    );\n  }\n}\n\nexport default Ball;\n","class Vector2 {\n  public x: number;\n  public y: number;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport default Vector2;\n","import Game from \"./Game\";\nimport Sprite from './Sprite';\nimport SpriteSheet from \"./SpriteSheet\";\nimport GameObject from \"./GameObject\";\nimport Vector2 from './Vector2';\n\nclass Paddle implements GameObject {\n  private height: number;\n  private width: number;\n  private maxSpeed: number;\n  public currentSpeed: number;\n  public position: Vector2;\n  private game: Game;\n  public sprite: Sprite;\n\n  constructor(game: Game) {\n    this.maxSpeed = 100;\n    this.currentSpeed = 0;\n    this.game = game;\n    this.sprite = this.game.spritesheets[\"main\"].getImage(\"paddle\");\n    this.height = this.sprite.height;\n    this.width = this.sprite.width;\n    this.position = new Vector2(\n      this.game.width / 2 - this.width / 2,\n      this.game.height - this.height - 10\n    );\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    let spr = this.game.spritesheets[\"main\"] as SpriteSheet;\n    ctx.drawImage(\n      spr.image,\n      this.sprite.x,\n      this.sprite.y,\n      this.sprite.width,\n      this.sprite.height,\n      this.position.x,\n      this.position.y,\n      this.width,\n      this.height,\n    );\n  }\n\n  update(deltaTime: number) {\n    this.position.x += this.currentSpeed / deltaTime;\n    if (this.position.x < 0) this.position.x = 0;\n    if (this.position.x + this.width > this.game.width)\n      this.position.x = this.game.width - this.width;\n  }\n\n  moveLeft() {\n    this.currentSpeed = -this.maxSpeed;\n  }\n\n  moveRight() {\n    this.currentSpeed = this.maxSpeed;\n  }\n\n  stop() {\n    this.currentSpeed = 0;\n  }\n}\n\nexport default Paddle;\n","import Paddle from \"./Paddle\";\n\nclass Input {\n  constructor(paddle: Paddle) {\n    document.addEventListener(\"keydown\", (evt: KeyboardEvent) => {\n      switch (evt.keyCode) {\n        case 37:\n          paddle.moveLeft();\n          break;\n        case 39:\n          paddle.moveRight();\n          break;\n      }\n    });\n    document.addEventListener(\"keyup\", (evt: KeyboardEvent) => {\n      switch (evt.keyCode) {\n        case 37:\n          if (paddle.currentSpeed < 0) paddle.stop();\n          break;\n        case 39:\n          if (paddle.currentSpeed > 0) paddle.stop();\n          break;\n      }\n    });\n  }\n}\n\nexport default Input;\n","import SpriteSheet from \"./SpriteSheet\";\nimport GameObject from \"./GameObject\";\nimport Ball from './Ball';\nimport Paddle from './Paddle';\nimport Input from './Input';\n\ninterface GameOptions {\n  width: number;\n  height: number;\n}\n\nclass Game {\n  private canvas: HTMLCanvasElement;\n  public ctx: CanvasRenderingContext2D;\n  public width: number = 600; // default width\n  public height: number = 300; // default height\n  private options: GameOptions;\n  public spritesheets: object = {};\n  public gameObjects: Array<GameObject>;\n\n  // Game Objects\n  private ball: GameObject;\n  private paddle: Paddle;\n\n  constructor(id?: string, options?: GameOptions) {\n    if (options) {\n      this.options = options;\n    }\n    // get the canvas or create a new one\n    if (id && document.getElementById(id)) {\n      this.canvas = document.getElementById(id) as HTMLCanvasElement;\n    } else {\n      this.canvas = document.createElement(\"canvas\");\n      document.appendChild(this.canvas);\n    }\n    // set the game size\n    if (this.options) {\n      this.canvas.width = this.options.width;\n      this.canvas.height = this.options.height;\n    }\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.width = this.canvas.getBoundingClientRect().width;\n    this.height = this.canvas.getBoundingClientRect().height;\n  }\n\n  loadSpritesheet(spr: SpriteSheet) {\n    this.spritesheets[spr.name] = spr;\n  }\n\n  start() {\n    this.ball = new Ball(this);\n    this.paddle = new Paddle(this);\n\n    new Input(this.paddle);\n\n    // add the game objects to the array\n    this.gameObjects = [\n      this.ball,\n      this.paddle,\n    ]\n  }\n\n  update(deltaTime) {\n    this.gameObjects.forEach(gameObject => {\n      gameObject.update(deltaTime);\n    })\n  }\n\n  draw() {\n    this.gameObjects.forEach(gameObject => {\n      gameObject.draw(this.ctx)\n    })\n  }\n}\n\nexport default Game;\n","class SpriteSheet {\n  public image: HTMLImageElement;\n  private data: Array<object>;\n  public name: string;\n\n  constructor(image: string, data: Array<object>, name: string) {\n    let tempImg = new Image();\n    tempImg.src = image;\n    this.image = tempImg;\n    this.data = data;\n    this.name = name;\n  }\n\n  getImage(name) {\n    for (const key in this.data) {\n      if (this.data.hasOwnProperty(key)) {\n        const elem = this.data[key];\n        if(elem[\"name\"] === name) {\n          return elem;\n        }\n      }\n    }\n  }\n}\n\nexport default SpriteSheet;\n","module.exports=[{name:\"paddle\",x:0,y:0,width:64,height:16},{name:\"brick\",x:0,y:17,width:32,height:16},{name:\"heart\",x:33,y:17,width:10,height:9},{name:\"empty_heart\",x:44,y:17,width:10,height:9},{name:\"ball\",x:0,y:33,width:8,height:8}];","import Game from \"./Game\";\nimport SpriteSheet from \"./SpriteSheet\";\n\n// import assets\nimport * as BreakoutSpritesheet from \"./assets/breakout.png\";\nimport * as BreakoutData from \"./assets/breakout.json\";\n\nMath.__proto__.toRad = (deg) => deg * (Math.PI/180);\nMath.__proto__.toDeg = (rad) => rad * (180/Math.PI);\n\n// create a new game obbject\nlet game = new Game(\"game\", {\n  width: 400,\n  height: 400,\n});\ngame.loadSpritesheet(new SpriteSheet(BreakoutSpritesheet.default, BreakoutData, \"main\"));\ngame.start();\n\nlet lastTime = 0;\nfunction gameLoop(timeStamp) {\n  let deltaTime = timeStamp - lastTime;\n  lastTime = timeStamp;\n\n  game.ctx.clearRect(0, 0, game.width, game.height);\n  game.update(deltaTime);\n  game.draw();\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n"]}